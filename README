# Arknights Shoot 项目文档

## 项目简介

`arknights_shoot` 是一个基于 C++ 和 EasyX 图形库开发的 2D 横版射击游戏 Demo。游戏核心玩法为玩家控制角色在平台场景中移动、跳跃并射击自动生成的敌人，包含基础物理模拟（重力、碰撞）、角色动画、资源管理和游戏状态机等功能。



***

## 功能特性

### 核心玩法

**角色控制**：玩家通过 `A`（左移）、`D`（右移）、`W`（跳跃）、`J`（射击）操作角色。

**敌人系统**：敌人自动生成（每 5 秒生成 1 次，场景内最多 3 个存活），支持受击击退（子弹命中时触发）。

**物理模拟**：包含重力（`GRAVITY=0.6f`）、最大下落速度（`MAX_FALL_SPEED=12`）、平台碰撞检测（角色与平台的上下 / 左右碰撞）。

**碰撞检测**：支持子弹与敌人的 AABB 碰撞检测（基于矩形包围盒交集判断）。

### 技术实现

**资源管理**：使用单例模式 `resource_manage` 加载图片资源（支持单张图片和序列帧图片），避免重复加载。

**动画系统**：玩家角色支持行走（多帧序列图）和待机（单张图）状态切换，根据移动速度自动更新帧动画。

**游戏状态机**：包含 `LOADING`（资源加载）、`MENU`（菜单）、`RUNNING`（运行）等状态，初始化时自动加载所需资源。



***

## 开发环境

**编程语言**：C++（C++11 及以上）

**图形库**：[EasyX 2021 或更高版本](https://easyx.cn/)（需安装并配置环境）

**开发工具**：Visual Studio 2017+（推荐，需安装 C++ 开发组件）

**依赖库**：`MSIMG32.LIB`（用于 Alpha 透明渲染）、`gdi32.lib`（Windows 图形接口）。



***

## 运行方法

### 步骤 1：环境配置

安装 EasyX 图形库（[下载地址](https://easyx.cn/)），确保 Visual Studio 能识别 `graphics.h` 等头文件。

项目需链接 `MSIMG32.LIB`（在 VS 中通过 `#pragma comment(lib, "MSIMG32.LIB")` 声明）。

### 步骤 2：资源准备

确保项目根目录存在 `res` 资源文件夹，结构如下：



```
res/ &#x20;

├─ chars/          # 角色图片 &#x20;

│  ├─ walk\_right\_1.png    # 玩家待机右 &#x20;

│  ├─ walk\_left\_1.png     # 玩家待机左 &#x20;

│  ├─ watcher1.png        # 敌人待机图 &#x20;

│  └─ move1/       # 玩家行走序列帧（示例路径） &#x20;

├─ platforms/      # 平台图片 &#x20;

│  └─ 1.png       # 平台图 &#x20;

├─ bullets/        # 子弹图片 &#x20;

│  └─ 2.png       # 子弹图 &#x20;

└─ bg.png          # 背景图 &#x20;
```

### 步骤 3：编译运行

使用 Visual Studio 打开项目（或直接编译 `.cpp` 文件）。

生成解决方案后，运行可执行文件，游戏会自动加载资源并进入运行状态。



***

## 代码结构

项目采用模块化设计，核心文件如下：



| 文件 / 目录             | 功能描述                                         |
| ------------------- | -------------------------------------------- |
| `game_manager.*`    | 游戏主控制器，管理状态机、输入处理、更新（`update`）和渲染（`draw`）逻辑。 |
| `character.*`       | 角色基类，定义位置、速度、跳跃、摩擦等通用属性和方法。                  |
| `player.*`          | 玩家角色派生类，实现移动动画、射击逻辑。                         |
| `enemy.*`           | 敌人派生类，实现生成、受击击退、存活状态管理。                      |
| `physics_engine.*`  | 物理引擎，处理重力、平台碰撞、子弹 - 敌人碰撞检测。                  |
| `resource_manage.*` | 资源管理单例类，加载 / 获取图片资源（支持单张图和序列帧）。              |
| `map.*`             | 地图与平台管理，包含平台生成和渲染逻辑。                         |
| `bullet.*`          | 子弹类，定义子弹位置、速度、存活状态和渲染方法。                     |



***

## 扩展指南

### 添加新角色

继承 `character` 基类，重写 `update()` 和 `draw()` 方法。

在 `resource_manage` 中注册新角色的图片资源（`load_image` 或 `load_image_sequence`）。

在 `game_manager` 中添加角色生成逻辑（如敌人生成类似）。

### 添加新武器

扩展 `weapon` 类，定义新子弹的速度、击退力、存活时间等属性。

在 `player::shoot()` 中调用新武器的 `fire()` 方法生成子弹。

注册子弹图片资源（`resource_manage::load_image("new_bullet", "path")`）。

### 修改物理参数

调整 `physics_engine.h` 中的 `GRAVITY`（重力）、`MAX_FALL_SPEED`（最大下落速度）等常量。

修改 `character.h` 中的 `friction`（摩擦系数）、`jump_power`（跳跃力度）等属性。



***

## 许可证

本项目代码采用 **MIT 许可证**（未明确声明时默认），资源文件（如图标、图片）仅限学习交流使用，请勿用于商业用途。



***

## 问题反馈

若遇到资源加载失败（如提示 `Invalid image size`），请检查：

`res` 文件夹路径是否正确（需与可执行文件同级）。

图片文件是否存在且格式为 PNG（部分代码示例中使用 `.png`）。
